package com.tommyhasselman.termsconditions.model;

import com.tommyhasselman.termsconditions.Controller;

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;

/**
 *  The Order class describes a order and a package of items to be displayed to the player.
 */
public class Order extends GameObject {


    private ArrayList<OrderItem> ordered = new ArrayList<>(); // Array of items on the order.
    private ArrayList<OrderItem> packed = new ArrayList<>(); // Array of items that have been packed.
    private ArrayList<OrderItem> packedShuff;
    private boolean correctlyPacked;
    private boolean validated;

    /**
     * Order constructor populates the ordered and packed arrays.
     * The Random class is used to decide if the items in the packed array
     * match the ones in the ordered array.
     */
    public Order(Controller c) {

        // Fills the ordered array with random items generated by the BasicItem class
        for (int i = 0; i < c.orderSize; i++){
            ordered.add(new BasicItem());
        }

        // Fills the packed array with matching or mismatching items.
        Random r = new Random();
        for (OrderItem i : ordered) {
            double chance = r.nextDouble();
            if (chance > c.incorrectItemChance) {
                packed.add(i);
            } else {
                // If the chance is less than missingItemChance the item will be skipped.
                if (chance > c.missingItemChance) {
                    packed.add(new BasicItem()); // There is a small chance that this item will happen to be the same at the moment.
                }
            }
        }

        correctlyPacked = (getOrderedCodes().equals(getPackedCodes()));

        packedShuff = (ArrayList<OrderItem>) packed.clone();
        Collections.shuffle(packedShuff);

    }

    /**
     * Concatenates the OrderItem codes for the ordered array for comparison.
     * @return Returns a String of OrderItem codes.
     */
    public String getOrderedCodes() {
        String s = "";
        for (OrderItem i : ordered) {
            s += i.getCode();
        }
        return s;
    }

    /**
     * Concatenates the OrderItem codes for the packed array for comparison.
     * @return Returns a String of OrderItem codes.
     */
    public String getPackedCodes() {
        String s = "";
        for (OrderItem i : packed) {
            s += i.getCode();
        }
        return s;
    }

    public ArrayList<OrderItem> getPacked() {
        return packed;
    }

    public ArrayList<OrderItem> getPackedShuff() {
        return packedShuff;
    }

    public ArrayList<OrderItem> getOrdered() {
        return ordered;
    }

    public void setOrdered(ArrayList<OrderItem> ordered) {
        this.ordered = ordered;
    }

    public void setPacked(ArrayList<OrderItem> packed) {
        this.packed = packed;
    }

    public boolean isValidated() {
        return validated;
    }

    public void setValidated(boolean validated) {
        this.validated = validated;
    }

    public boolean isCorrectlyPacked() {
        return correctlyPacked;
    }
}
