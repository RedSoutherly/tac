package com.tommyhasselman.termsconditions.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;

/** Class Box that compares the contents of the box/parcel to what should be in the box/parcel */
public class Box extends GameObject {

    List<OrderItem> boxContains = new ArrayList<OrderItem>();

    List<OrderItem> boxShouldContain = new ArrayList<OrderItem>();

    /** Value that determines the chance that a random item is going to be generated in boxShouldContain */
    int chanceValue = 4;

    /** Box constructor initialises both boxContains and boxShouldContain with items */
    public Box (int length) {
        int indexBoxContains  = 0;
        /** Fills the box with random items generated by the BasicItem class */
        while (indexBoxContains < length){
            boxContains.add(new BasicItem());
            indexBoxContains++;
        }

        int index = 0;
        /** Determines what the box should contain. There is a 50% chance that
         * each item is the same as the item actually present in the box */
        while (index < length){
            Random rand = new Random();
            int sameItem = rand.nextInt(chanceValue);

            /** Generates a random item in boxShouldContain at a rate of 25% */
            if (sameItem >= 1){
                boxShouldContain.add(boxContains.get(index));
            } else {
                boxShouldContain.add(new BasicItem());
            }
            index++;
        }
    }

    public List<OrderItem> getBoxContains() {
        return boxContains;
    }

    public List<OrderItem> getBoxShouldContain() {
        return boxShouldContain;
    }
}
